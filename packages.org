# ;; ____   ___    ___ __ __  ___    ___   ____  __  ;;
# ;; || \\ // \\  //   || // // \\  // \\ ||    (( \ ;;
# ;; ||_// ||=|| ((    ||<<  ||=|| (( ___ ||==   \\  ;;
# ;; ||    || ||  \\__ || \\ || ||  \\_|| ||___ \_)) ;;
#  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

* AceWindow
# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
# ;;                Ace Window	                ;;
# ;; Allows nice switching between frames/windows ;;
# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+BEGIN_SRC emacs-lisp
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Allow certain functions to work in terminal ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (require 'term)
  (defun expose-global-binding-in-term (binding)
    (define-key term-raw-map binding 
      (lookup-key (current-global-map) binding)))

  (use-package ace-window
    :config
    (progn
      (global-set-key (kbd "M-o") 'ace-window)
      (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
      (expose-global-binding-in-term (kbd "M-o"))))
#+END_SRC
  
* Elpy
;;;;;;;;;;;;;;;;;;;;;;;;;;
;;       Elpy	        ;;
;; Fancy python helper  ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;

#+BEGIN_SRC emacs-lisp
(use-package elpy
  :config
  (progn
    (elpy-enable)))
#+END_SRC

* Buffer Move
# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
# ;;                  Buffer move			  ;;
# ;; Nice way to move buffers around to different windows ;;
# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+BEGIN_SRC emacs-lisp
(use-package buffer-move
  :config
  (progn
    (global-set-key (kbd "S-<left>")  'buf-move-left)
    (global-set-key (kbd "S-<right>") 'buf-move-right)
    (global-set-key (kbd "S-<up>")    'buf-move-up)
    (global-set-key (kbd "S-<down>")  'buf-move-down)
    ))
#+END_SRC

* Eterm 256 color
# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
# ;;      eterm 256color	      ;;
# ;; Make Ansi-term have color! ;;
# ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+BEGIN_SRC emacs-lisp
(use-package eterm-256color
  :config
  (eterm-256color-mode t)
  )
#+END_SRC

* IBuffer
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;           IBuffer		 ;;
;; Makes Buffer look 100x better ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+BEGIN_SRC emacs-lisp
(use-package ibuffer
  :config
  (global-set-key (kbd "C-x C-b")  'ibuffer))
#+END_SRC

* Company Mode

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                 Company Mode			      ;;
;; Autocomplete software			      ;;
;; Needs clang so might switch (because of ssh stuff) ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook 'global-company-mode)
#+END_SRC

* Avy

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                          Avy				      ;;
;; Package used for jumping to words/lines with asdf keys     ;;
;; I only like the avy-goto-line (swiper works better for me) ;;
;; and even goto-line is an iffy time saver...		      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+BEGIN_SRC emacs-lisp
(use-package avy
  :config
  (global-set-key (kbd "M-g M-g") 'avy-goto-line))
#+END_SRC

* Swiper

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                  Swiper   (Needs Counsel)			      ;;
;; Package for finding anything! Works with searching, buffer change, ;;
;; finding of a file, and M-x stuff. Very pretty!		      ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+BEGIN_SRC emacs-lisp
;; it looks like counsel is a requirement for swiper
(use-package counsel)

(use-package swiper
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (global-set-key "\C-s" 'swiper)
    (global-set-key (kbd "M-%") 'swiper-query-replace)
    (global-set-key (kbd "C-x b") 'ivy-switch-buffer)
    (global-set-key (kbd "C-x b") 'ivy-switch-buffer)
    (global-set-key (kbd "C-r") 'ivy-resume)
    (global-set-key (kbd "<f6>") 'ivy-resume)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "M-y") 'counsel-yank-pop)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "<f1> f") 'counsel-describe-function)
    (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
    (global-set-key (kbd "<f1> l") 'counsel-load-library)
    (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
    (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    (global-set-key (kbd "C-c g") 'counsel-git)
    (global-set-key (kbd "C-c j") 'counsel-git-grep)
    (global-set-key (kbd "C-c k") 'counsel-ag)
    (global-set-key (kbd "C-x l") 'counsel-locate)
    (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
    ))
#+END_SRC

* Smart Parens

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                        SmartParens				    ;;
;; Very finicky, but can be nice for not worrying about parentheses ;;
;; Added C-' for moving paren forward 				    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :config
    (smartparens-global-mode t)
    (require 'smartparens-config)
    (global-set-key (kbd "C-'") 'sp-forward-slurp-sexp)
    (global-set-key (kbd "C-(") 'sp-wrap-round)
;;    (global-set-key (kbd "C-[") 'sp-wrap-square)
    (global-set-key (kbd "C-{") 'sp-wrap-curly)
    )
#+END_SRC

* Zoom

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                          Zoom				  ;;
;; Has balancing of windows. Need to fix it with dired mode,	  ;;
;; but looks nice. It's set to have a Golden Ratio, may change... ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+BEGIN_SRC emacs-lisp
;; (use-package zoom
;;   :config
;;   (progn
;;     (zoom-mode t)
;;     (custom-set-variables
;;      '(zoom-size '(0.618 . 0.75)
;; 		 ;;     '(zoom-ignored-major-modes '(dired-mode))
;; 		 ))))

#+END_SRC

* Aggressive Indent
#+BEGIN_SRC emacs-lisp
(use-package aggressive-indent
  :config
  (progn
    ;; Turned on everywhere, but can add exceptions below
    (global-aggressive-indent-mode 1)
    (add-to-list 'aggressive-indent-excluded-modes 'html-mode)))
#+END_SRC

* Resize Window
#+BEGIN_SRC emacs-lisp
;;; Doesn't work with zoom on
(use-package resize-window
  :config
  (progn
    (global-set-key (kbd "C-c ;") 'resize-window)
    ))
#+END_SRC

<* Doom Modeline

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;             Doom Modeline		    ;;
;; Changes the bottome line to look slicker ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :hook (after-init . doom-modeline-mode)
  :config
  (progn (setq find-file-visit-truename t)
	 (setq doom-modeline-height 10)
	 (setq doom-modeline-buffer-file-name-style 'truncate-upto-project)))

#+END_SRC

* Magit

;;;;;;;;;;;;;;;;;;;;;;;
;;     Magit	     ;;
;; Git but in emacs! ;;
;;;;;;;;;;;;;;;;;;;;;;;

#+BEGIN_SRC emacs-lisp
(use-package magit
  :config
  (global-set-key (kbd "C-x g") 'magit-status)
  )
#+END_SRC

* Rainbow Delimiters

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :config
    (progn
      (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
      (add-hook 'prog-mode-hook (show-paren-mode))))

  ;; (set-face-background 'show-paren-match-face "#FFFFFF")
#+END_SRC

* Dmenu
#+BEGIN_SRC emacs-lisp
(use-package dmenu
  :ensure t
  )
#+END_SRC

* Eyebrowse
#+BEGIN_SRC emacs-lisp
(defun setup-eyebrowseWS ()
  (interactive)

  ;; number 0
  (eyebrowse-switch-to-window-config-0)
  (eyebrowse-rename-window-config 0 "desktop")
  (switch-to-buffer "*scratch*")

  ;; number 1
  (eyebrowse-switch-to-window-config-1)
  (eyebrowse-rename-window-config 1 "local")
  (delete-other-windows)
  (split-window-below)
  (dired "~")
  (switch-window)
  (terminal)
  (switch-to-buffer "*ansi-term*")
  
  ;; number 2
  (eyebrowse-switch-to-window-config-2)
  (eyebrowse-rename-window-config 2 "ssh")
  (delete-other-windows)
  (switch-to-buffer "*scratch*")
  
  ;; number 3 
  (eyebrowse-switch-to-window-config-3)
  (eyebrowse-rename-window-config 3 "org")
  (delete-other-windows)
  (dired "~/org-todo")
  (split-window-below)
  (find-file-other-window (format-time-string "~/org-todo/%Y%U_notes.org"))

  (eyebrowse-switch-to-window-config-0)
  )

(use-package eyebrowse
  :ensure t
  :init
  (setq eyebrowse-keymap-prefix (kbd "M-e"))
  (global-unset-key (kbd "C-c C-w"))
  :config
  (progn
    (eyebrowse-mode t)

    ))
#+END_SRC



